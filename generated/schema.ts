// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("paused", Value.fromBoolean(false));
    this.set("totalUsers", Value.fromBigInt(BigInt.zero()));
    this.set("totalBets", Value.fromBigInt(BigInt.zero()));
    this.set("totalBetsBull", Value.fromBigInt(BigInt.zero()));
    this.set("totalBetsBear", Value.fromBigInt(BigInt.zero()));
    this.set("totalToken", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalTokenBull", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalTokenBear", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalTokenTreasury", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("rewardRate", Value.fromBigInt(BigInt.zero()));
    this.set("treasuryRate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Market entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): string | null {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set epoch(value: string | null) {
    if (!value) {
      this.unset("epoch");
    } else {
      this.set("epoch", Value.fromString(<string>value));
    }
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value!.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value!.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalBetsBull(): BigInt {
    let value = this.get("totalBetsBull");
    return value!.toBigInt();
  }

  set totalBetsBull(value: BigInt) {
    this.set("totalBetsBull", Value.fromBigInt(value));
  }

  get totalBetsBear(): BigInt {
    let value = this.get("totalBetsBear");
    return value!.toBigInt();
  }

  set totalBetsBear(value: BigInt) {
    this.set("totalBetsBear", Value.fromBigInt(value));
  }

  get totalToken(): BigDecimal {
    let value = this.get("totalToken");
    return value!.toBigDecimal();
  }

  set totalToken(value: BigDecimal) {
    this.set("totalToken", Value.fromBigDecimal(value));
  }

  get totalTokenBull(): BigDecimal {
    let value = this.get("totalTokenBull");
    return value!.toBigDecimal();
  }

  set totalTokenBull(value: BigDecimal) {
    this.set("totalTokenBull", Value.fromBigDecimal(value));
  }

  get totalTokenBear(): BigDecimal {
    let value = this.get("totalTokenBear");
    return value!.toBigDecimal();
  }

  set totalTokenBear(value: BigDecimal) {
    this.set("totalTokenBear", Value.fromBigDecimal(value));
  }

  get totalTokenTreasury(): BigDecimal {
    let value = this.get("totalTokenTreasury");
    return value!.toBigDecimal();
  }

  set totalTokenTreasury(value: BigDecimal) {
    this.set("totalTokenTreasury", Value.fromBigDecimal(value));
  }

  get rewardRate(): BigInt {
    let value = this.get("rewardRate");
    return value!.toBigInt();
  }

  set rewardRate(value: BigInt) {
    this.set("rewardRate", Value.fromBigInt(value));
  }

  get treasuryRate(): BigInt {
    let value = this.get("treasuryRate");
    return value!.toBigInt();
  }

  set treasuryRate(value: BigInt) {
    this.set("treasuryRate", Value.fromBigInt(value));
  }
}

export class Round extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("epoch", Value.fromBigInt(BigInt.zero()));
    this.set("startAt", Value.fromBigInt(BigInt.zero()));
    this.set("startBlock", Value.fromBigInt(BigInt.zero()));
    this.set("startHash", Value.fromBytes(Bytes.empty()));
    this.set("openPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalBets", Value.fromBigInt(BigInt.zero()));
    this.set("totalAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("bullBets", Value.fromBigInt(BigInt.zero()));
    this.set("bullAmount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("bearBets", Value.fromBigInt(BigInt.zero()));
    this.set("bearAmount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Round entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Round entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Round", id.toString(), this);
    }
  }

  static load(id: string): Round | null {
    return changetype<Round | null>(store.get("Round", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    return value!.toBigInt();
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get position(): string | null {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set position(value: string | null) {
    if (!value) {
      this.unset("position");
    } else {
      this.set("position", Value.fromString(<string>value));
    }
  }

  get failed(): boolean {
    let value = this.get("failed");
    return value!.toBoolean();
  }

  set failed(value: boolean) {
    this.set("failed", Value.fromBoolean(value));
  }

  get previous(): string | null {
    let value = this.get("previous");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previous(value: string | null) {
    if (!value) {
      this.unset("previous");
    } else {
      this.set("previous", Value.fromString(<string>value));
    }
  }

  get startAt(): BigInt {
    let value = this.get("startAt");
    return value!.toBigInt();
  }

  set startAt(value: BigInt) {
    this.set("startAt", Value.fromBigInt(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value!.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get startHash(): Bytes {
    let value = this.get("startHash");
    return value!.toBytes();
  }

  set startHash(value: Bytes) {
    this.set("startHash", Value.fromBytes(value));
  }

  get openPrice(): BigDecimal {
    let value = this.get("openPrice");
    return value!.toBigDecimal();
  }

  set openPrice(value: BigDecimal) {
    this.set("openPrice", Value.fromBigDecimal(value));
  }

  get lockAt(): BigInt | null {
    let value = this.get("lockAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockAt(value: BigInt | null) {
    if (!value) {
      this.unset("lockAt");
    } else {
      this.set("lockAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockBlock(): BigInt | null {
    let value = this.get("lockBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockBlock(value: BigInt | null) {
    if (!value) {
      this.unset("lockBlock");
    } else {
      this.set("lockBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockHash(): Bytes | null {
    let value = this.get("lockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lockHash(value: Bytes | null) {
    if (!value) {
      this.unset("lockHash");
    } else {
      this.set("lockHash", Value.fromBytes(<Bytes>value));
    }
  }

  get endAt(): BigInt | null {
    let value = this.get("endAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endAt(value: BigInt | null) {
    if (!value) {
      this.unset("endAt");
    } else {
      this.set("endAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get endBlock(): BigInt | null {
    let value = this.get("endBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endBlock(value: BigInt | null) {
    if (!value) {
      this.unset("endBlock");
    } else {
      this.set("endBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get endHash(): Bytes | null {
    let value = this.get("endHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set endHash(value: Bytes | null) {
    if (!value) {
      this.unset("endHash");
    } else {
      this.set("endHash", Value.fromBytes(<Bytes>value));
    }
  }

  get closePrice(): BigDecimal | null {
    let value = this.get("closePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set closePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("closePrice");
    } else {
      this.set("closePrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value!.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value!.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }

  get totalAmountTreasury(): BigDecimal | null {
    let value = this.get("totalAmountTreasury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalAmountTreasury(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalAmountTreasury");
    } else {
      this.set("totalAmountTreasury", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get bullBets(): BigInt {
    let value = this.get("bullBets");
    return value!.toBigInt();
  }

  set bullBets(value: BigInt) {
    this.set("bullBets", Value.fromBigInt(value));
  }

  get bullAmount(): BigDecimal {
    let value = this.get("bullAmount");
    return value!.toBigDecimal();
  }

  set bullAmount(value: BigDecimal) {
    this.set("bullAmount", Value.fromBigDecimal(value));
  }

  get bearBets(): BigInt {
    let value = this.get("bearBets");
    return value!.toBigInt();
  }

  set bearBets(value: BigInt) {
    this.set("bearBets", Value.fromBigInt(value));
  }

  get bearAmount(): BigDecimal {
    let value = this.get("bearAmount");
    return value!.toBigDecimal();
  }

  set bearAmount(value: BigDecimal) {
    this.set("bearAmount", Value.fromBigDecimal(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value!.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("totalBets", Value.fromBigInt(BigInt.zero()));
    this.set("totalToken", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get totalBets(): BigInt {
    let value = this.get("totalBets");
    return value!.toBigInt();
  }

  set totalBets(value: BigInt) {
    this.set("totalBets", Value.fromBigInt(value));
  }

  get totalToken(): BigDecimal {
    let value = this.get("totalToken");
    return value!.toBigDecimal();
  }

  set totalToken(value: BigDecimal) {
    this.set("totalToken", Value.fromBigDecimal(value));
  }

  get bets(): Array<string> {
    let value = this.get("bets");
    return value!.toStringArray();
  }

  set bets(value: Array<string>) {
    this.set("bets", Value.fromStringArray(value));
  }
}

export class Bets extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("round", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("position", Value.fromString(""));
    this.set("claimed", Value.fromBoolean(false));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bets entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bets entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bets", id.toString(), this);
    }
  }

  static load(id: string): Bets | null {
    return changetype<Bets | null>(store.get("Bets", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    return value!.toString();
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get claimedAmount(): BigDecimal | null {
    let value = this.get("claimedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set claimedAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("claimedAmount");
    } else {
      this.set("claimedAmount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get claimedHash(): Bytes | null {
    let value = this.get("claimedHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claimedHash(value: Bytes | null) {
    if (!value) {
      this.unset("claimedHash");
    } else {
      this.set("claimedHash", Value.fromBytes(<Bytes>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
